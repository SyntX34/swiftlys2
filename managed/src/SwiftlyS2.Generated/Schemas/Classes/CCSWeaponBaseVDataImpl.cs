// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CCSWeaponBaseVDataImpl : CBasePlayerWeaponVDataImpl, CCSWeaponBaseVData {

  public CCSWeaponBaseVDataImpl(nint handle) : base(handle) {
  }

  public ref CSWeaponType WeaponType {
    get => ref _Handle.AsRef<CSWeaponType>(Schema.GetOffset(0x62FB7705B2A4B729));
  }
  public ref CSWeaponCategory WeaponCategory {
    get => ref _Handle.AsRef<CSWeaponCategory>(Schema.GetOffset(0x62FB7705D801BE7D));
  }
  public SchemaUntypedField Model_AG2 {
    get => new SchemaUntypedField(_Handle + Schema.GetOffset(0x62FB77057CDF7624));
  }
  public SchemaUntypedField AnimSkeleton {
    get => new SchemaUntypedField(_Handle + Schema.GetOffset(0x62FB770599001426));
  }
  public ref Vector MuzzlePos0 {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x62FB7705F1464952));
  }
  public ref Vector MuzzlePos1 {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x62FB7705F2464AE5));
  }
  public SchemaUntypedField TracerParticle {
    get => new SchemaUntypedField(_Handle + Schema.GetOffset(0x62FB77052069597B));
  }
  public ref gear_slot_t GearSlot {
    get => ref _Handle.AsRef<gear_slot_t>(Schema.GetOffset(0x62FB7705A7DEA50A));
  }
  public ref int GearSlotPosition {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB770566E58B75));
  }
  public ref loadout_slot_t DefaultLoadoutSlot {
    get => ref _Handle.AsRef<loadout_slot_t>(Schema.GetOffset(0x62FB77050659E286));
  }
  public ref int Price {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB770566452996));
  }
  public ref int KillAward {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB7705FD38ACB6));
  }
  public ref int PrimaryReserveAmmoMax {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB7705B5E3D05D));
  }
  public ref int SecondaryReserveAmmoMax {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB77054889583D));
  }
  public ref bool MeleeWeapon {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x62FB770503896E6B));
  }
  public ref bool HasBurstMode {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x62FB7705AAB8D5A0));
  }
  public ref bool IsRevolver {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x62FB770532BFE326));
  }
  public ref bool CannotShootUnderwater {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x62FB770562CE8EA4));
  }
  public ref CGlobalSymbol Name {
    get => ref _Handle.AsRef<CGlobalSymbol>(Schema.GetOffset(0x62FB77056750BACB));
  }
  public ref CSWeaponSilencerType SilencerType {
    get => ref _Handle.AsRef<CSWeaponSilencerType>(Schema.GetOffset(0x62FB77055893CF83));
  }
  public ref int CrosshairMinDistance {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB7705643AF856));
  }
  public ref int CrosshairDeltaDistance {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB77056185F940));
  }
  public ref bool IsFullAuto {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x62FB7705C13B5F1B));
  }
  public ref int NumBullets {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB7705A23E232C));
  }
  public ref bool ReloadsSingleShells {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x62FB7705E894329A));
  }
  public CFiringModeFloat CycleTime {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB77059EE036CE));
  }
  public CFiringModeFloat MaxSpeed {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB7705EC4C9592));
  }
  public CFiringModeFloat Spread {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB77059AE479A0));
  }
  public CFiringModeFloat InaccuracyCrouch {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB77058292DF17));
  }
  public CFiringModeFloat InaccuracyStand {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB77054F7B5FDF));
  }
  public CFiringModeFloat InaccuracyJump {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB7705C43E18E9));
  }
  public CFiringModeFloat InaccuracyLand {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB77058A797810));
  }
  public CFiringModeFloat InaccuracyLadder {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB7705EAC7C4C5));
  }
  public CFiringModeFloat InaccuracyFire {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB770598CB9215));
  }
  public CFiringModeFloat InaccuracyMove {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB7705724CFCB0));
  }
  public CFiringModeFloat RecoilAngle {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB7705D60D8F48));
  }
  public CFiringModeFloat RecoilAngleVariance {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB77059780CA6B));
  }
  public CFiringModeFloat RecoilMagnitude {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB77051FEEF3A5));
  }
  public CFiringModeFloat RecoilMagnitudeVariance {
    get => new CFiringModeFloatImpl(_Handle + Schema.GetOffset(0x62FB77058FED537E));
  }
  public CFiringModeInt TracerFrequency {
    get => new CFiringModeIntImpl(_Handle + Schema.GetOffset(0x62FB7705E42D0FCE));
  }
  public ref float InaccuracyJumpInitial {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705CA4877B7));
  }
  public ref float InaccuracyJumpApex {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB77057F1CC92D));
  }
  public ref float InaccuracyReload {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB77053901E0D8));
  }
  public ref float DeployDuration {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705D1FD08AC));
  }
  public ref float DisallowAttackAfterReloadStartDuration {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB770588E73223));
  }
  public ref int BurstShotCount {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB770508DDF2C4));
  }
  public ref bool AllowBurstHolster {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x62FB770587F9A99B));
  }
  public ref int RecoilSeed {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB77055E857C76));
  }
  public ref int SpreadSeed {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB77056564C76B));
  }
  public ref float AttackMovespeedFactor {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705D3F6F2BA));
  }
  public ref float InaccuracyPitchShift {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705C964ED1F));
  }
  public ref float InaccuracyAltSoundThreshold {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705973D88CA));
  }
  public string UseRadioSubtitle {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x62FB77052060E88A));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x62FB77052060E88A, value);
  } 
  public ref bool UnzoomsAfterShot {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x62FB770525A040FC));
  }
  public ref bool HideViewModelWhenZoomed {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x62FB7705B28E6FC7));
  }
  public ref int ZoomLevels {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB7705F3DFB3E5));
  }
  public ref int ZoomFOV1 {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB7705FD77D500));
  }
  public ref int ZoomFOV2 {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB77050077D9B9));
  }
  public ref float ZoomTime0 {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705BD15007B));
  }
  public ref float ZoomTime1 {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705BC14FEE8));
  }
  public ref float ZoomTime2 {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705BF1503A1));
  }
  public ref float IronSightPullUpSpeed {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705B268B33F));
  }
  public ref float IronSightPutDownSpeed {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705A7511AB6));
  }
  public ref float IronSightFOV {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB770571453BB5));
  }
  public ref float IronSightPivotForward {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705DF9C0E9F));
  }
  public ref float IronSightLooseness {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB77057D4B5557));
  }
  public ref int Damage {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB77051C56D69C));
  }
  public ref float HeadshotMultiplier {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705B47FF686));
  }
  public ref float ArmorRatio {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB77050C023CFD));
  }
  public ref float Penetration {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705C4163F78));
  }
  public ref float Range {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB77053FC92844));
  }
  public ref float RangeModifier {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705556FEA15));
  }
  public ref float FlinchVelocityModifierLarge {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB77053B6EE2A2));
  }
  public ref float FlinchVelocityModifierSmall {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705D1377236));
  }
  public ref float RecoveryTimeCrouch {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705E1AE27FB));
  }
  public ref float RecoveryTimeStand {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705EF962E33));
  }
  public ref float RecoveryTimeCrouchFinal {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB77053F2544A1));
  }
  public ref float RecoveryTimeStandFinal {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB7705F2206E39));
  }
  public ref int RecoveryTransitionStartBullet {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB7705096DC2B3));
  }
  public ref int RecoveryTransitionEndBullet {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x62FB77054CBD7B0A));
  }
  public ref float ThrowVelocity {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x62FB770522C82B26));
  }
  public ref Vector SmokeColor {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x62FB77057808EA9D));
  }
  public ref CGlobalSymbol AnimClass {
    get => ref _Handle.AsRef<CGlobalSymbol>(Schema.GetOffset(0x62FB77054B23C797));
  }


}