// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CRagdollPropImpl : CBaseAnimGraphImpl, CRagdollProp {

  public CRagdollPropImpl(nint handle) : base(handle) {
  }

  public ragdoll_t Ragdoll {
    get => new ragdoll_tImpl(_Handle + Schema.GetOffset(0x9505BA78F62C6568));
  }
  public ref bool StartDisabled {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x9505BA7861ED0C4F));
  }
  public ref CUtlVector<bool> RagEnabled {
    get => ref _Handle.AsRef<CUtlVector<bool>>(Schema.GetOffset(0x9505BA78CD1FB84A));
  }
  public ref CUtlVector<Vector> RagPos {
    get => ref _Handle.AsRef<CUtlVector<Vector>>(Schema.GetOffset(0x9505BA7897C85315));
  }
  public ref CUtlVector<QAngle> RagAngles {
    get => ref _Handle.AsRef<CUtlVector<QAngle>>(Schema.GetOffset(0x9505BA78FD4E530D));
  }
  public ref uint LastUpdateTickCount {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0x9505BA785A98C204));
  }
  public ref bool AllAsleep {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x9505BA783DE13402));
  }
  public ref bool FirstCollisionAfterLaunch {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x9505BA78C9D93EAC));
  }
  public ref CHandle<CBaseEntity> DamageEntity {
    get => ref _Handle.AsRef<CHandle<CBaseEntity>>(Schema.GetOffset(0x9505BA784C4C28C5));
  }
  public ref CHandle<CBaseEntity> Killer {
    get => ref _Handle.AsRef<CHandle<CBaseEntity>>(Schema.GetOffset(0x9505BA780F088B1C));
  }
  public ref CHandle<CBasePlayerPawn> PhysicsAttacker {
    get => ref _Handle.AsRef<CHandle<CBasePlayerPawn>>(Schema.GetOffset(0x9505BA787A5EB877));
  }
  public GameTime_t LastPhysicsInfluenceTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x9505BA785B5C0E32));
  }
  public GameTime_t FadeOutStartTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x9505BA78A63078C0));
  }
  public ref float FadeTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x9505BA7800BEDB08));
  }
  public ref Vector LastOrigin {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x9505BA78F13D764B));
  }
  public GameTime_t AwakeTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x9505BA78D471FE9B));
  }
  public GameTime_t LastOriginChangeTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x9505BA78B66C9A18));
  }
  public string StrOriginClassName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x9505BA7809148529));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x9505BA7809148529, value);
  } 
  public string StrSourceClassName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x9505BA78F3FD1A0C));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x9505BA78F3FD1A0C, value);
  } 
  public ref bool HasBeenPhysgunned {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x9505BA785058D154));
  }
  public ref bool AllowStretch {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x9505BA78F6CDF40F));
  }
  public ref float BlendWeight {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x9505BA78E5D6B9CE));
  }
  public ref float DefaultFadeScale {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x9505BA784DA9700C));
  }
  public ref CUtlVector<Vector> RagdollMins {
    get => ref _Handle.AsRef<CUtlVector<Vector>>(Schema.GetOffset(0x9505BA78CD1755B5));
  }
  public ref CUtlVector<Vector> RagdollMaxs {
    get => ref _Handle.AsRef<CUtlVector<Vector>>(Schema.GetOffset(0x9505BA7833F9714F));
  }
  public ref bool ShouldDeleteActivationRecord {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x9505BA7838134064));
  }

  public void RagEnabledUpdated() {
    Schema.Update(_Handle, 0x9505BA78CD1FB84A);
  }
  public void RagPosUpdated() {
    Schema.Update(_Handle, 0x9505BA7897C85315);
  }
  public void RagAnglesUpdated() {
    Schema.Update(_Handle, 0x9505BA78FD4E530D);
  }
  public void BlendWeightUpdated() {
    Schema.Update(_Handle, 0x9505BA78E5D6B9CE);
  }
}