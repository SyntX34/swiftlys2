// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CPlantedC4Impl : CBaseAnimGraphImpl, CPlantedC4 {

  public CPlantedC4Impl(nint handle) : base(handle) {
  }

  public ref bool BombTicking {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xE1614C81CA7488E0));
  }
  public GameTime_t C4Blow {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xE1614C812C4CFDAC));
  }
  public ref int BombSite {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xE1614C81E027AC16));
  }
  public ref int SourceSoundscapeHash {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xE1614C8185EE0527));
  }
  public ref bool AbortDetonationBecauseWorldIsFrozen {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xE1614C812D71EDD6));
  }
  public CAttributeContainer AttributeManager {
    get => new CAttributeContainerImpl(_Handle + Schema.GetOffset(0xE1614C81537B0586));
  }
  public CEntityIOOutput OnBombDefused {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xE1614C81BCDAD16E));
  }
  public CEntityIOOutput OnBombBeginDefuse {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xE1614C81CD3D21A7));
  }
  public CEntityIOOutput OnBombDefuseAborted {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xE1614C81DCF21D69));
  }
  public ref bool CannotBeDefused {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xE1614C81AF7C9CFF));
  }
  public EntitySpottedState_t EntitySpottedState {
    get => new EntitySpottedState_tImpl(_Handle + Schema.GetOffset(0xE1614C81032B547C));
  }
  public ref int SpotRules {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xE1614C81776CCE44));
  }
  public ref bool TrainingPlacedByPlayer {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xE1614C818D8A976E));
  }
  public ref bool HasExploded {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xE1614C814F35E7B0));
  }
  public ref float TimerLength {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xE1614C815758DBE8));
  }
  public ref bool BeingDefused {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xE1614C81E52E1146));
  }
  public GameTime_t LastDefuseTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xE1614C81F3BD810E));
  }
  public ref float DefuseLength {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xE1614C8164CC4751));
  }
  public GameTime_t DefuseCountDown {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xE1614C81BCF3DB7C));
  }
  public ref bool BombDefused {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xE1614C81CA9F868D));
  }
  public ref CHandle<CCSPlayerPawn> BombDefuser {
    get => ref _Handle.AsRef<CHandle<CCSPlayerPawn>>(Schema.GetOffset(0xE1614C8174E01381));
  }
  public ref int ProgressBarTime {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xE1614C81FFF19E89));
  }
  public ref bool VoiceAlertFired {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xE1614C8139790C5F));
  }
public ISchemaFixedArray<bool> VoiceAlertPlayed {
    get => new SchemaFixedArray<bool>(_Handle, 0xE1614C812559EA7A, 4, 1, 1);
  }
  public GameTime_t NextBotBeepTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xE1614C81DCAF5642));
  }
  public ref QAngle CatchUpToPlayerEye {
    get => ref _Handle.AsRef<QAngle>(Schema.GetOffset(0xE1614C816AE78258));
  }
  public GameTime_t LastSpinDetectionTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xE1614C811BF3E683));
  }

  public void BombTickingUpdated() {
    Schema.Update(_Handle, 0xE1614C81CA7488E0);
  }
  public void C4BlowUpdated() {
    Schema.Update(_Handle, 0xE1614C812C4CFDAC);
  }
  public void BombSiteUpdated() {
    Schema.Update(_Handle, 0xE1614C81E027AC16);
  }
  public void SourceSoundscapeHashUpdated() {
    Schema.Update(_Handle, 0xE1614C8185EE0527);
  }
  public void AttributeManagerUpdated() {
    Schema.Update(_Handle, 0xE1614C81537B0586);
  }
  public void CannotBeDefusedUpdated() {
    Schema.Update(_Handle, 0xE1614C81AF7C9CFF);
  }
  public void EntitySpottedStateUpdated() {
    Schema.Update(_Handle, 0xE1614C81032B547C);
  }
  public void HasExplodedUpdated() {
    Schema.Update(_Handle, 0xE1614C814F35E7B0);
  }
  public void TimerLengthUpdated() {
    Schema.Update(_Handle, 0xE1614C815758DBE8);
  }
  public void BeingDefusedUpdated() {
    Schema.Update(_Handle, 0xE1614C81E52E1146);
  }
  public void DefuseLengthUpdated() {
    Schema.Update(_Handle, 0xE1614C8164CC4751);
  }
  public void DefuseCountDownUpdated() {
    Schema.Update(_Handle, 0xE1614C81BCF3DB7C);
  }
  public void BombDefusedUpdated() {
    Schema.Update(_Handle, 0xE1614C81CA9F868D);
  }
  public void BombDefuserUpdated() {
    Schema.Update(_Handle, 0xE1614C8174E01381);
  }
}