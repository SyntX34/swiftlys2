// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CTriggerLerpObjectImpl : CBaseTriggerImpl, CTriggerLerpObject {

  public CTriggerLerpObjectImpl(nint handle) : base(handle) {
  }

  public string LerpTarget {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x42FE8EA4853F2479));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x42FE8EA4853F2479, value);
  } 
  public ref CHandle<CBaseEntity> LerpTarget1 {
    get => ref _Handle.AsRef<CHandle<CBaseEntity>>(Schema.GetOffset(0x42FE8EA4BAB18AEF));
  }
  public string LerpTargetAttachment {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x42FE8EA4C1E312BC));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x42FE8EA4C1E312BC, value);
  } 
  public AttachmentHandle_t LerpTargetAttachment2 {
    get => new AttachmentHandle_tImpl(_Handle + Schema.GetOffset(0x42FE8EA4FC3162AA));
  }
  public ref float LerpDuration {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x42FE8EA4B5F8D70A));
  }
  public ref bool LerpRestoreMoveType {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x42FE8EA4C501C93F));
  }
  public ref bool SingleLerpObject {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x42FE8EA4EC72477B));
  }
  public ref CUtlVector<lerpdata_t> LerpingObjects {
    get => ref _Handle.AsRef<CUtlVector<lerpdata_t>>(Schema.GetOffset(0x42FE8EA40128714C));
  }
  public string LerpEffect {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x42FE8EA4EEECF881));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x42FE8EA4EEECF881, value);
  } 
  public string LerpSound {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x42FE8EA46CA9EE5F));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x42FE8EA46CA9EE5F, value);
  } 
  public ref bool AttachTouchingObject {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x42FE8EA4569C11D2));
  }
  public ref CHandle<CBaseEntity> EntityToWaitForDisconnect {
    get => ref _Handle.AsRef<CHandle<CBaseEntity>>(Schema.GetOffset(0x42FE8EA4E8928591));
  }
  public CEntityIOOutput OnLerpStarted {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x42FE8EA4AE5EB5AA));
  }
  public CEntityIOOutput OnLerpFinished {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x42FE8EA4FBCC57F7));
  }
  public CEntityIOOutput OnDetached {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x42FE8EA465BAE906));
  }


}