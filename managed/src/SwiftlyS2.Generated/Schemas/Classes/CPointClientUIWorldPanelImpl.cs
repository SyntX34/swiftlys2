// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CPointClientUIWorldPanelImpl : CBaseClientUIEntityImpl, CPointClientUIWorldPanel {

  public CPointClientUIWorldPanelImpl(nint handle) : base(handle) {
  }

  public ref bool IgnoreInput {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6F946EC6E1));
  }
  public ref bool Lit {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6F68D14396));
  }
  public ref bool FollowPlayerAcrossTeleport {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6F8C71E81F));
  }
  public ref float Width {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xA4834E6FB91935E1));
  }
  public ref float Height {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xA4834E6FEADD7FB0));
  }
  public ref float DPI {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xA4834E6FEB0B7A2E));
  }
  public ref float InteractDistance {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xA4834E6F47FBB4C2));
  }
  public ref float DepthOffset {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xA4834E6F67D1DB9B));
  }
  public ref uint OwnerContext {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0xA4834E6FB5F5A8BC));
  }
  public ref uint HorizontalAlign {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0xA4834E6FF2F27A57));
  }
  public ref uint VerticalAlign {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0xA4834E6FC263FE8D));
  }
  public ref uint Orientation {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0xA4834E6FB9A99B4C));
  }
  public ref bool AllowInteractionFromAllSceneWorlds {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6FB50077AE));
  }
  public ref CUtlVector<SchemaUntypedField> CSSClasses {
    get => ref _Handle.AsRef<CUtlVector<SchemaUntypedField>>(Schema.GetOffset(0xA4834E6FCB74D1DC));
  }
  public ref bool Opaque {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6F718DB77E));
  }
  public ref bool NoDepth {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6F930402F3));
  }
  public ref bool VisibleWhenParentNoDraw {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6F894EBD44));
  }
  public ref bool RenderBackface {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6F9150ED73));
  }
  public ref bool UseOffScreenIndicator {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6F83728A46));
  }
  public ref bool ExcludeFromSaveGames {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6FFC6043F7));
  }
  public ref bool Grabbable {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6FFE2A8983));
  }
  public ref bool OnlyRenderToTexture {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6F52B95FF9));
  }
  public ref bool DisableMipGen {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xA4834E6F0CB84487));
  }
  public ref int ExplicitImageLayout {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xA4834E6FAFAD513C));
  }

  public void IgnoreInputUpdated() {
    Schema.Update(_Handle, 0xA4834E6F946EC6E1);
  }
  public void LitUpdated() {
    Schema.Update(_Handle, 0xA4834E6F68D14396);
  }
  public void FollowPlayerAcrossTeleportUpdated() {
    Schema.Update(_Handle, 0xA4834E6F8C71E81F);
  }
  public void WidthUpdated() {
    Schema.Update(_Handle, 0xA4834E6FB91935E1);
  }
  public void HeightUpdated() {
    Schema.Update(_Handle, 0xA4834E6FEADD7FB0);
  }
  public void DPIUpdated() {
    Schema.Update(_Handle, 0xA4834E6FEB0B7A2E);
  }
  public void InteractDistanceUpdated() {
    Schema.Update(_Handle, 0xA4834E6F47FBB4C2);
  }
  public void DepthOffsetUpdated() {
    Schema.Update(_Handle, 0xA4834E6F67D1DB9B);
  }
  public void OwnerContextUpdated() {
    Schema.Update(_Handle, 0xA4834E6FB5F5A8BC);
  }
  public void HorizontalAlignUpdated() {
    Schema.Update(_Handle, 0xA4834E6FF2F27A57);
  }
  public void VerticalAlignUpdated() {
    Schema.Update(_Handle, 0xA4834E6FC263FE8D);
  }
  public void OrientationUpdated() {
    Schema.Update(_Handle, 0xA4834E6FB9A99B4C);
  }
  public void AllowInteractionFromAllSceneWorldsUpdated() {
    Schema.Update(_Handle, 0xA4834E6FB50077AE);
  }
  public void CSSClassesUpdated() {
    Schema.Update(_Handle, 0xA4834E6FCB74D1DC);
  }
  public void OpaqueUpdated() {
    Schema.Update(_Handle, 0xA4834E6F718DB77E);
  }
  public void NoDepthUpdated() {
    Schema.Update(_Handle, 0xA4834E6F930402F3);
  }
  public void VisibleWhenParentNoDrawUpdated() {
    Schema.Update(_Handle, 0xA4834E6F894EBD44);
  }
  public void RenderBackfaceUpdated() {
    Schema.Update(_Handle, 0xA4834E6F9150ED73);
  }
  public void UseOffScreenIndicatorUpdated() {
    Schema.Update(_Handle, 0xA4834E6F83728A46);
  }
  public void ExcludeFromSaveGamesUpdated() {
    Schema.Update(_Handle, 0xA4834E6FFC6043F7);
  }
  public void GrabbableUpdated() {
    Schema.Update(_Handle, 0xA4834E6FFE2A8983);
  }
  public void OnlyRenderToTextureUpdated() {
    Schema.Update(_Handle, 0xA4834E6F52B95FF9);
  }
  public void DisableMipGenUpdated() {
    Schema.Update(_Handle, 0xA4834E6F0CB84487);
  }
  public void ExplicitImageLayoutUpdated() {
    Schema.Update(_Handle, 0xA4834E6FAFAD513C);
  }
}