// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_OP_RenderModelsImpl : CParticleFunctionRendererImpl, C_OP_RenderModels {

  public C_OP_RenderModelsImpl(nint handle) : base(handle) {
  }

  public ref bool OnlyRenderInEffectsBloomPass {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13D6FA0FBC));
  }
  public ref bool OnlyRenderInEffectsWaterPass {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13111BB03C));
  }
  public ref bool UseMixedResolutionRendering {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B138C2B17B7));
  }
  public ref bool OnlyRenderInEffecsGameOverlay {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B130293C80E));
  }
  public ref CUtlVector<ModelReference_t> ModelList {
    get => ref _Handle.AsRef<CUtlVector<ModelReference_t>>(Schema.GetOffset(0xC58C7B1305FC11B6));
  }
  public ParticleAttributeIndex_t BodyGroupField {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0xC58C7B13556DEFD4));
  }
  public ParticleAttributeIndex_t SubModelField {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0xC58C7B13ED904DE2));
  }
  public ref bool IgnoreNormal {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B131AD60A6C));
  }
  public ref bool OrientZ {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B139307DE0A));
  }
  public ref bool CenterOffset {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13E2C912BF));
  }
  public CPerParticleVecInput LocalOffset {
    get => new CPerParticleVecInputImpl(_Handle + Schema.GetOffset(0xC58C7B130ABC2F9B));
  }
  public CPerParticleVecInput LocalRotation {
    get => new CPerParticleVecInputImpl(_Handle + Schema.GetOffset(0xC58C7B1396B4170E));
  }
  public ref bool IgnoreRadius {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13DD2E3E91));
  }
  public ref int ModelScaleCP {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xC58C7B134E008EEF));
  }
  public CPerParticleVecInput ComponentScale {
    get => new CPerParticleVecInputImpl(_Handle + Schema.GetOffset(0xC58C7B13B17954E2));
  }
  public ref bool LocalScale {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B136BF4802A));
  }
  public ref int SizeCullBloat {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xC58C7B135EB61122));
  }
  public ref bool Animated {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13D0F1701C));
  }
  public CPerParticleFloatInput AnimationRate {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xC58C7B13607083AD));
  }
  public ref bool ScaleAnimationRate {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B133CEBA30B));
  }
  public ref bool ForceLoopingAnimation {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B134CD43984));
  }
  public ref bool ResetAnimOnStop {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13A7CA94A8));
  }
  public ref bool ManualAnimFrame {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13FA6279DB));
  }
  public ParticleAttributeIndex_t AnimationScaleField {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0xC58C7B1328447E1F));
  }
  public ParticleAttributeIndex_t AnimationField {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0xC58C7B13EBE2D213));
  }
  public ParticleAttributeIndex_t ManualFrameField {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0xC58C7B1352FAE698));
  }
public string ActivityName {
    get {
      var ptr = _Handle + Schema.GetOffset(0xC58C7B13BF0C5087);
      return Schema.GetString(ptr);
    }
    set => Schema.SetFixedString(_Handle, 0xC58C7B13BF0C5087, value, 256);
  } 
public string SequenceName {
    get {
      var ptr = _Handle + Schema.GetOffset(0xC58C7B13A270F66B);
      return Schema.GetString(ptr);
    }
    set => Schema.SetFixedString(_Handle, 0xC58C7B13A270F66B, value, 256);
  } 
  public ref bool EnableClothSimulation {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13F2B3D0A9));
  }
public string ClothEffectName {
    get {
      var ptr = _Handle + Schema.GetOffset(0xC58C7B139D0B2FCD);
      return Schema.GetString(ptr);
    }
    set => Schema.SetFixedString(_Handle, 0xC58C7B139D0B2FCD, value, 64);
  } 
  public ref CStrongHandle<InfoForResourceTypeIMaterial2> OverrideMaterial {
    get => ref _Handle.AsRef<CStrongHandle<InfoForResourceTypeIMaterial2>>(Schema.GetOffset(0xC58C7B132C055CBE));
  }
  public ref bool OverrideTranslucentMaterials {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13A9CF9EDA));
  }
  public CPerParticleFloatInput Skin {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xC58C7B13E65A22FC));
  }
  public ref CUtlVector<MaterialVariable_t> MaterialVars {
    get => ref _Handle.AsRef<CUtlVector<MaterialVariable_t>>(Schema.GetOffset(0xC58C7B13FA861D66));
  }
  public CPerParticleFloatInput RenderFilter {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xC58C7B13EDE7010D));
  }
  public CPerParticleFloatInput ManualModelSelection {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xC58C7B1356A82C10));
  }
  public CParticleModelInput ModelInput {
    get => new CParticleModelInputImpl(_Handle + Schema.GetOffset(0xC58C7B13EB74120E));
  }
  public ref int LOD {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xC58C7B138303A434));
  }
public string EconSlotName {
    get {
      var ptr = _Handle + Schema.GetOffset(0xC58C7B13F7A43C9B);
      return Schema.GetString(ptr);
    }
    set => Schema.SetFixedString(_Handle, 0xC58C7B13F7A43C9B, value, 256);
  } 
  public ref bool OriginalModel {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13F52DF2AF));
  }
  public ref bool SuppressTint {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B1381F42727));
  }
  public ref RenderModelSubModelFieldType_t SubModelFieldType {
    get => ref _Handle.AsRef<RenderModelSubModelFieldType_t>(Schema.GetOffset(0xC58C7B13C37F4112));
  }
  public ref bool DisableShadows {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13161A1880));
  }
  public ref bool DisableDepthPrepass {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B13A31BF4A8));
  }
  public ref bool AcceptsDecals {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B133D83AB88));
  }
  public ref bool ForceDrawInterlevedWithSiblings {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B131D0350F5));
  }
  public ref bool DoNotDrawInParticlePass {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B130E9B1BCB));
  }
  public ref bool AllowApproximateTransforms {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xC58C7B136C6ACC65));
  }
public string RenderAttribute {
    get {
      var ptr = _Handle + Schema.GetOffset(0xC58C7B13A343F648);
      return Schema.GetString(ptr);
    }
    set => Schema.SetFixedString(_Handle, 0xC58C7B13A343F648, value, 260);
  } 
  public CParticleCollectionFloatInput RadiusScale {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0xC58C7B13A7A20159));
  }
  public CParticleCollectionFloatInput AlphaScale {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0xC58C7B13EC6D3C25));
  }
  public CParticleCollectionFloatInput RollScale {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0xC58C7B13F2113F72));
  }
  public ParticleAttributeIndex_t Alpha2Field {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0xC58C7B13F60EADC1));
  }
  public CParticleCollectionVecInput ColorScale {
    get => new CParticleCollectionVecInputImpl(_Handle + Schema.GetOffset(0xC58C7B139F9BB8BA));
  }
  public ref ParticleColorBlendType_t ColorBlendType {
    get => ref _Handle.AsRef<ParticleColorBlendType_t>(Schema.GetOffset(0xC58C7B13DBC6EFCF));
  }


}