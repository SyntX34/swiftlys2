// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CPathParticleRopeImpl : CBaseEntityImpl, CPathParticleRope {

  public CPathParticleRopeImpl(nint handle) : base(handle) {
  }

  public ref bool StartActive {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBC0C741B953CBC21));
  }
  public ref float MaxSimulationTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xBC0C741B80F036E5));
  }
  public string EffectName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xBC0C741B82D2BFC7));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xBC0C741B82D2BFC7, value);
  } 
  public ref CUtlVector<SchemaUntypedField> PathNodes_Name {
    get => ref _Handle.AsRef<CUtlVector<SchemaUntypedField>>(Schema.GetOffset(0xBC0C741BFFAFA92F));
  }
  public ref float ParticleSpacing {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xBC0C741B66CCF542));
  }
  public ref float Slack {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xBC0C741B183285C9));
  }
  public ref float Radius {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xBC0C741B5ACFC08D));
  }
  public ref Color ColorTint {
    get => ref _Handle.AsRef<Color>(Schema.GetOffset(0xBC0C741BD55CDDFD));
  }
  public ref int EffectState {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xBC0C741B4188A2AD));
  }
  public ref CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> EffectIndex {
    get => ref _Handle.AsRef<CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>>(Schema.GetOffset(0xBC0C741B3C93DC73));
  }
  public ref CUtlVector<Vector> PathNodes_Position {
    get => ref _Handle.AsRef<CUtlVector<Vector>>(Schema.GetOffset(0xBC0C741BC84253C7));
  }
  public ref CUtlVector<Vector> PathNodes_TangentIn {
    get => ref _Handle.AsRef<CUtlVector<Vector>>(Schema.GetOffset(0xBC0C741B4CEA7F8E));
  }
  public ref CUtlVector<Vector> PathNodes_TangentOut {
    get => ref _Handle.AsRef<CUtlVector<Vector>>(Schema.GetOffset(0xBC0C741B218FA6AF));
  }
  public ref CUtlVector<Vector> PathNodes_Color {
    get => ref _Handle.AsRef<CUtlVector<Vector>>(Schema.GetOffset(0xBC0C741B6DB8C1DB));
  }
  public ref CUtlVector<bool> PathNodes_PinEnabled {
    get => ref _Handle.AsRef<CUtlVector<bool>>(Schema.GetOffset(0xBC0C741B830E8AD8));
  }
  public ref CUtlVector<float> PathNodes_RadiusScale {
    get => ref _Handle.AsRef<CUtlVector<float>>(Schema.GetOffset(0xBC0C741B593CB340));
  }

  public void ParticleSpacingUpdated() {
    Schema.Update(_Handle, 0xBC0C741B66CCF542);
  }
  public void SlackUpdated() {
    Schema.Update(_Handle, 0xBC0C741B183285C9);
  }
  public void RadiusUpdated() {
    Schema.Update(_Handle, 0xBC0C741B5ACFC08D);
  }
  public void ColorTintUpdated() {
    Schema.Update(_Handle, 0xBC0C741BD55CDDFD);
  }
  public void EffectStateUpdated() {
    Schema.Update(_Handle, 0xBC0C741B4188A2AD);
  }
  public void EffectIndexUpdated() {
    Schema.Update(_Handle, 0xBC0C741B3C93DC73);
  }
  public void PathNodes_PositionUpdated() {
    Schema.Update(_Handle, 0xBC0C741BC84253C7);
  }
  public void PathNodes_TangentInUpdated() {
    Schema.Update(_Handle, 0xBC0C741B4CEA7F8E);
  }
  public void PathNodes_TangentOutUpdated() {
    Schema.Update(_Handle, 0xBC0C741B218FA6AF);
  }
  public void PathNodes_ColorUpdated() {
    Schema.Update(_Handle, 0xBC0C741B6DB8C1DB);
  }
  public void PathNodes_PinEnabledUpdated() {
    Schema.Update(_Handle, 0xBC0C741B830E8AD8);
  }
  public void PathNodes_RadiusScaleUpdated() {
    Schema.Update(_Handle, 0xBC0C741B593CB340);
  }
}