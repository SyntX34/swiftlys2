// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CRenderMeshImpl : SchemaClass, CRenderMesh {

  public CRenderMeshImpl(nint handle) : base(handle) {
  }

  public SchemaUntypedField SceneObjects {
    get => new SchemaUntypedField(_Handle + Schema.GetOffset(0x8593C3BF332235A1));
  }
  public ref CUtlLeanVector<PointerTo<CBaseConstraint>, int> Constraints {
    get => ref _Handle.AsRef<CUtlLeanVector<PointerTo<CBaseConstraint>, int>>(Schema.GetOffset(0x8593C3BF251CBAAB));
  }
  public CRenderSkeleton Skeleton {
    get => new CRenderSkeletonImpl(_Handle + Schema.GetOffset(0x8593C3BFE77F030E));
  }
  public ref bool UseUV2ForCharting {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8593C3BFFE2DF46A));
  }
  public ref bool EmbeddedMapMesh {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8593C3BF6E866052));
  }
  public DynamicMeshDeformParams_t MeshDeformParams {
    get => new DynamicMeshDeformParams_tImpl(_Handle + Schema.GetOffset(0x8593C3BF061DBB9B));
  }
  public CRenderGroom? GroomData {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x8593C3BFCFCDEA93));
      return ptr.IsValidPtr() ? new CRenderGroomImpl(ptr) : null;
    }
  }


}