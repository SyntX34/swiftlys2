// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.SchemaDefinitions;

namespace SwiftlyS2.Shared.SchemaDefinitions;

public partial interface CEnvVolumetricFogController : CBaseEntity, ISchemaClass<CEnvVolumetricFogController> {

  static CEnvVolumetricFogController ISchemaClass<CEnvVolumetricFogController>.From(nint handle) => new CEnvVolumetricFogControllerImpl(handle);
  static int ISchemaClass<CEnvVolumetricFogController>.Size => 1440;

  
  public ref float Scattering { get; }
  
  public ref Color TintColor { get; }
  
  public ref float Anisotropy { get; }
  
  public ref float FadeSpeed { get; }
  
  public ref float DrawDistance { get; }
  
  public ref float FadeInStart { get; }
  
  public ref float FadeInEnd { get; }
  
  public ref float IndirectStrength { get; }
  
  public ref int VolumeDepth { get; }
  
  public ref float FirstVolumeSliceThickness { get; }
  
  public ref int IndirectTextureDimX { get; }
  
  public ref int IndirectTextureDimY { get; }
  
  public ref int IndirectTextureDimZ { get; }
  
  public ref Vector BoxMins { get; }
  
  public ref Vector BoxMaxs { get; }
  
  public ref bool Active { get; }
  
  public GameTime_t StartAnisoTime { get; }
  
  public GameTime_t StartScatterTime { get; }
  
  public GameTime_t StartDrawDistanceTime { get; }
  
  public ref float StartAnisotropy { get; }
  
  public ref float StartScattering { get; }
  
  public ref float StartDrawDistance { get; }
  
  public ref float DefaultAnisotropy { get; }
  
  public ref float DefaultScattering { get; }
  
  public ref float DefaultDrawDistance { get; }
  
  public ref bool StartDisabled { get; }
  
  public ref bool EnableIndirect { get; }
  
  public ref bool IsMaster { get; }
  
  public ref CStrongHandle<InfoForResourceTypeCTextureBase> FogIndirectTexture { get; }
  
  public ref int ForceRefreshCount { get; }
  
  public ref float NoiseSpeed { get; }
  
  public ref float NoiseStrength { get; }
  
  public ref Vector NoiseScale { get; }
  
  public ref float WindSpeed { get; }
  
  public ref Vector WindDirection { get; }
  
  public ref bool FirstTime { get; }

  public void ScatteringUpdated();
  public void TintColorUpdated();
  public void AnisotropyUpdated();
  public void FadeSpeedUpdated();
  public void DrawDistanceUpdated();
  public void FadeInStartUpdated();
  public void FadeInEndUpdated();
  public void IndirectStrengthUpdated();
  public void VolumeDepthUpdated();
  public void FirstVolumeSliceThicknessUpdated();
  public void IndirectTextureDimXUpdated();
  public void IndirectTextureDimYUpdated();
  public void IndirectTextureDimZUpdated();
  public void BoxMinsUpdated();
  public void BoxMaxsUpdated();
  public void ActiveUpdated();
  public void StartAnisoTimeUpdated();
  public void StartScatterTimeUpdated();
  public void StartDrawDistanceTimeUpdated();
  public void StartAnisotropyUpdated();
  public void StartScatteringUpdated();
  public void StartDrawDistanceUpdated();
  public void DefaultAnisotropyUpdated();
  public void DefaultScatteringUpdated();
  public void DefaultDrawDistanceUpdated();
  public void StartDisabledUpdated();
  public void EnableIndirectUpdated();
  public void IsMasterUpdated();
  public void FogIndirectTextureUpdated();
  public void ForceRefreshCountUpdated();
  public void NoiseSpeedUpdated();
  public void NoiseStrengthUpdated();
  public void NoiseScaleUpdated();
  public void WindSpeedUpdated();
  public void WindDirectionUpdated();
}