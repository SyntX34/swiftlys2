// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.SchemaDefinitions;

namespace SwiftlyS2.Shared.SchemaDefinitions;

public partial interface CSceneEntity : CPointEntity, ISchemaClass<CSceneEntity> {

  static CSceneEntity ISchemaClass<CSceneEntity>.From(nint handle) => new CSceneEntityImpl(handle);
  static int ISchemaClass<CSceneEntity>.Size => 2640;

  
  public string SceneFile { get; set; }
  
  public string ResumeSceneFile { get; set; }
  
  public string Target1 { get; set; }
  
  public string Target2 { get; set; }
  
  public string Target3 { get; set; }
  
  public string Target4 { get; set; }
  
  public string Target5 { get; set; }
  
  public string Target6 { get; set; }
  
  public string Target7 { get; set; }
  
  public string Target8 { get; set; }
  
  public ref CHandle<CBaseEntity> Target11 { get; }
  
  public ref CHandle<CBaseEntity> Target22 { get; }
  
  public ref CHandle<CBaseEntity> Target33 { get; }
  
  public ref CHandle<CBaseEntity> Target44 { get; }
  
  public ref CHandle<CBaseEntity> Target55 { get; }
  
  public ref CHandle<CBaseEntity> Target66 { get; }
  
  public ref CHandle<CBaseEntity> Target77 { get; }
  
  public ref CHandle<CBaseEntity> Target88 { get; }
  
  public string TargetAttachment { get; set; }
  
  public ref bool IsPlayingBack { get; }
  
  public ref bool Paused { get; }
  
  public ref bool Multiplayer { get; }
  
  public ref bool Autogenerated { get; }
  
  public ref float ForceClientTime { get; }
  
  public ref float CurrentTime { get; }
  
  public ref float FrameTime { get; }
  
  public ref bool CancelAtNextInterrupt { get; }
  
  public ref float Pitch { get; }
  
  public ref bool Automated { get; }
  
  public ref int AutomatedAction { get; }
  
  public ref float AutomationDelay { get; }
  
  public ref float AutomationTime { get; }
  
  public ref int SpeechPriority { get; }
  
  public ref CHandle<CBaseEntity> WaitingForThisResumeScene { get; }
  
  public ref bool WaitingForResumeScene { get; }
  
  public ref bool PausedViaInput { get; }
  
  public ref bool PauseAtNextInterrupt { get; }
  
  public ref bool WaitingForActor { get; }
  
  public ref bool WaitingForInterrupt { get; }
  
  public ref bool InterruptedActorsScenes { get; }
  
  public ref bool BreakOnNonIdle { get; }
  
  public ref bool SceneFinished { get; }
  
  public ref CUtlVector<CHandle<CBaseFlex>> ActorList { get; }
  
  public ref CUtlVector<CHandle<CBaseEntity>> RemoveActorList { get; }
  
  public ref int SceneFlushCounter { get; }
  
  public ref ushort SceneStringIndex { get; }
  
  public CEntityIOOutput OnStart { get; }
  
  public CEntityIOOutput OnCompletion { get; }
  
  public CEntityIOOutput OnCanceled { get; }
  
  public CEntityIOOutput OnPaused { get; }
  
  public CEntityIOOutput OnResumed { get; }
  
  // CEntityIOOutput
  public SchemaUntypedField OnTrigger { get; }
  
  public ref CHandle<CSceneEntity> InterruptScene { get; }
  
  public ref int InterruptCount { get; }
  
  public ref bool SceneMissing { get; }
  
  public ref bool Interrupted { get; }
  
  public ref bool CompletedEarly { get; }
  
  public ref bool InterruptSceneFinished { get; }
  
  public ref bool Restoring { get; }
  
  public ref CUtlVector<CHandle<CSceneEntity>> NotifySceneCompletion { get; }
  
  public ref CUtlVector<CHandle<CSceneListManager>> ListManagers { get; }
  
  public string SoundName { get; set; }
  
  public string SequenceName { get; set; }
  
  public ref CHandle<CBaseFlex> Actor { get; }
  
  public ref CHandle<CBaseEntity> Activator { get; }
  
  public ref int BusyActor { get; }
  
  public ref SceneOnPlayerDeath_t PlayerDeathBehavior { get; }

  public void IsPlayingBackUpdated();
  public void PausedUpdated();
  public void MultiplayerUpdated();
  public void AutogeneratedUpdated();
  public void ForceClientTimeUpdated();
  public void ActorListUpdated();
  public void SceneStringIndexUpdated();
}