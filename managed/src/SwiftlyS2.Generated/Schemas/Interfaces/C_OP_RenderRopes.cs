// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.SchemaDefinitions;

namespace SwiftlyS2.Shared.SchemaDefinitions;

public partial interface C_OP_RenderRopes : CBaseRendererSource2, ISchemaClass<C_OP_RenderRopes> {

  static C_OP_RenderRopes ISchemaClass<C_OP_RenderRopes>.From(nint handle) => new C_OP_RenderRopesImpl(handle);
  static int ISchemaClass<C_OP_RenderRopes>.Size => 12456;

  
  public ref bool EnableFadingAndClamping { get; }
  
  public ref float MinSize { get; }
  
  public ref float MaxSize { get; }
  
  public ref float StartFadeSize { get; }
  
  public ref float EndFadeSize { get; }
  
  public ref float StartFadeDot { get; }
  
  public ref float EndFadeDot { get; }
  
  public ref float RadiusTaper { get; }
  
  public ref int MinTesselation { get; }
  
  public ref int MaxTesselation { get; }
  
  public ref float TessScale { get; }
  
  public CParticleCollectionRendererFloatInput TextureVWorldSize { get; }
  
  public CParticleCollectionRendererFloatInput TextureVScrollRate { get; }
  
  public CParticleCollectionRendererFloatInput TextureVOffset { get; }
  
  public ref int TextureVParamsCP { get; }
  
  public ref bool ClampV { get; }
  
  public ref int ScaleCP1 { get; }
  
  public ref int ScaleCP2 { get; }
  
  public ref float ScaleVSizeByControlPointDistance { get; }
  
  public ref float ScaleVScrollByControlPointDistance { get; }
  
  public ref float ScaleVOffsetByControlPointDistance { get; }
  
  public ref bool UseScalarForTextureCoordinate { get; }
  
  public ParticleAttributeIndex_t ScalarFieldForTextureCoordinate { get; }
  
  public ref float ScalarAttributeTextureCoordScale { get; }
  
  public ref bool ReverseOrder { get; }
  
  public ref bool ClosedLoop { get; }
  
  public ParticleAttributeIndex_t SplitField { get; }
  
  public ref bool SortBySegmentID { get; }
  
  public ref ParticleOrientationChoiceList_t OrientationType { get; }
  
  public ParticleAttributeIndex_t VectorFieldForOrientation { get; }
  
  public ref bool DrawAsOpaque { get; }
  
  public ref bool GenerateNormals { get; }


}